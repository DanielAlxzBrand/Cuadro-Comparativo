# Cuadro Comparativo: Bases de Datos ACID vs. BASE

| **Aspecto**                     | **ACID**                                                                 | **BASE**                                                                 |
|---------------------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------|
| **Definición**                  | Acrónimo de **Atomicity, Consistency, Isolation, Durability**. Garantiza transacciones fiables con consistencia estricta. | Acrónimo de **Basically Available, Soft state, Eventually consistent**. Prioriza disponibilidad y escalabilidad sobre consistencia inmediata. |
| **Atomicidad**                  | Cada transacción es un todo indivisible: se ejecuta completamente o no se ejecuta (rollback en caso de fallo). | No garantiza atomicidad estricta; las operaciones pueden completarse parcialmente y sincronizarse más tarde. |
| **Consistencia**                | Consistencia fuerte: cada transacción lleva la base de datos de un estado válido a otro, respetando todas las reglas y restricciones. | Consistencia eventual: los datos se sincronizan con el tiempo, permitiendo inconsistencias temporales entre nodos. |
| **Aislamiento**                 | Las transacciones se ejecutan de forma aislada, evitando interferencias (por ejemplo, lecturas sucias o escrituras fantasma). | No hay aislamiento estricto; las operaciones concurrentes pueden ver datos intermedios o no sincronizados. |
| **Durabilidad**                 | Los cambios confirmados (commit) se almacenan permanentemente, incluso ante fallos del sistema (uso de logs o discos). | Los cambios pueden no ser inmediatamente duraderos en todos los nodos, pero se propagan con el tiempo. |
| **Disponibilidad**              | Puede sacrificarse en favor de la consistencia, especialmente en sistemas distribuidos (según el teorema CAP). | Prioriza la disponibilidad, asegurando que el sistema esté operativo incluso en caso de fallos parciales. |
| **Escalabilidad**               | Limitada en sistemas distribuidos debido a la necesidad de coordinación para garantizar consistencia. Escala mejor verticalmente. | Alta escalabilidad horizontal, diseñada para manejar grandes volúmenes de datos y usuarios mediante particionamiento y replicación. |
| **Tolerancia a particiones**    | Baja; prioriza consistencia y puede rechazar operaciones durante particiones de red (CP en teorema CAP). | Alta; tolera particiones de red y prioriza disponibilidad (AP en teorema CAP). |
| **Modelo de datos**             | Generalmente relacional, con esquemas rígidos (tablas, claves primarias, relaciones). | Flexible, soporta modelos NoSQL como clave-valor, documentos, columnas o grafos, ideal para datos no estructurados. |
| **Mecanismos técnicos**         | Usa bloqueos (locks), transacciones serializables y logs de escritura anticipada (WAL) para garantizar fiabilidad. | Usa replicación asíncrona, particionamiento (sharding) y resolución de conflictos (por ejemplo, versionado o "última escritura gana"). |
| **Rendimiento**                 | Menor en sistemas distribuidos debido a la sobrecarga de coordinación y bloqueos. | Mayor en sistemas distribuidos, ya que evita coordinación inmediata y prioriza operaciones rápidas. |
| **Latencia**                    | Mayor latencia en operaciones debido a la necesidad de garantizar consistencia y aislamiento. | Menor latencia, ya que las operaciones no requieren sincronización inmediata entre nodos. |
| **Gestión de conflictos**       | Evita conflictos mediante aislamiento estricto y rollback en caso de problemas. | Resuelve conflictos posteriormente, usando técnicas como versionado o reglas de prioridad. |
| **Ejemplos**                    | MySQL, PostgreSQL, Oracle Database, SQL Server.                          | Cassandra, MongoDB, DynamoDB, CouchDB.                                   |
| **Casos de uso**                | - Sistemas financieros (transferencias bancarias).<br>- Gestión de inventarios.<br>- Aplicaciones con transacciones complejas. | - Redes sociales (feeds, publicaciones).<br>- Análisis de big data.<br>- Sistemas IoT o streaming. |
| **Ventajas**                    | - Alta fiabilidad y consistencia.<br>- Ideal para operaciones críticas.<br>- Soporte robusto para transacciones complejas. | - Alta escalabilidad y disponibilidad.<br>- Tolerancia a fallos y particiones.<br>- Manejo eficiente de grandes volúmenes de datos. |
| **Desventajas**                 | - Escalabilidad limitada en sistemas distribuidos.<br>- Mayor latencia en entornos de alta concurrencia.<br>- Complejidad en sistemas distribuidos. | - Consistencia eventual puede causar datos temporales inconsistentes.<br>- Complejidad en la resolución de conflictos.<br>- Menos adecuado para aplicaciones críticas. |
| **Complejidad de implementación**| Más simple en sistemas centralizados; compleja en distribuidos debido a la coordinación requerida. | Más compleja debido a la gestión de estados suaves, sincronización asíncrona y resolución de conflictos. |
| **Soporte para big data**       | Limitado; no está diseñado para manejar datos no estructurados o distribuidos a gran escala. | Diseñado específicamente para big data, con soporte para datos no estructurados y alta concurrencia. |
| **Teorema CAP**                 | Prioriza Consistencia y Tolerancia a Particiones (CP).                   | Prioriza Disponibilidad y Tolerancia a Particiones (AP).                 |
| **Ejemplo práctico**            | Transferencia bancaria: $100 se debitan de una cuenta y se acreditan en otra, garantizando que ambas operaciones se completen o ninguna lo haga. | Feed de red social: un usuario puede ver una publicación ligeramente desactualizada mientras los nodos se sincronizan. |
